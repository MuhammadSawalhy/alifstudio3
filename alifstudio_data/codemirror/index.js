(function () {
	'use strict';

	const {
		EditorState,
		EditorView,
		basicSetup
	} = CM["@codemirror/basic-setup"];

	const {
		javascript,
		javascriptLanguage
	} = CM["@codemirror/lang-javascript"];

	const {
		completeFromList
	} = CM["@codemirror/autocomplete"];

	let keywords = "break case catch class const continue debugger default delete do else enum export extends false finally for function if implements import interface in instanceof let new package private protected public return static super switch this throw true try typeof var void while with yield".split(" ").map(kw => ({
		label: kw,
		type: "keyword"
	}));

	let globals = Object.getOwnPropertyNames(window).map(p => {
		return {
			label: p,
			type: /^[A-Z]/.test(p) ? "class" : typeof window[p] == "function" ? "function" : "variable"
		};
	});

	let jsCompletion = completeFromList([...keywords, ...globals]);
  
	let state = EditorState.create({
		doc: `المرجو إختيار ملف..`,
		extensions: [basicSetup, javascript(), javascriptLanguage.data.of({
			autocomplete: jsCompletion
		})]
	});
	window.view = new EditorView({
		state,
		parent: document.querySelector("#editor")
	});
})();

/*
(function () {
  'use strict';

  // @omit
  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const {Parser} = CM["lezer"];
  const {NodeProp} = CM["lezer"];
  const parser = Parser.deserialize({
    version: 13,
    states: "!WQYQPOOOhQPO'#CdOOQO'#Ci'#CiOOQO'#Ce'#CeQYQPOOOOQO,59O,59OOyQPO,59OOOQO-E6c-E6cOOQO1G.j1G.j",
    stateData: "![~O[OSPOS~ORQOSQOTQOVPO~ORQOSQOTQOUTOVPO~ORQOSQOTQOUWOVPO~O",
    goto: "u^PPPPPPPP_ePPPoXQOPSUQSOQUPTVSUXROPSU",
    nodeNames: "⚠ LineComment Program Identifier String Boolean ) ( Application",
    maxTerm: 13,
    nodeProps: [
      [NodeProp.openedBy, 6,"("],
      [NodeProp.closedBy, 7,")"]
    ],
    skippedNodes: [0,1],
    repeatNodeCount: 1,
    tokenData: "$W~R^XY}YZ}]^}pq}rs!`st!}xy#]yz#b}!O#g!Q![#g!]!^#{!c!}#g#R#S#g#T#o#g~!SS[~XY}YZ}]^}pq}~!cTOr!`rs!rs#O!`#O#P!w#P~!`~!wOS~~!zPO~!`~#QQ#Y#Z#W#h#i#W~#]OT~~#bOV~~#gOU~~#lTR~}!O#g!Q![#g!c!}#g#R#S#g#T#o#g~$QQP~OY#{Z~#{",
    tokenizers: [0],
    topRules: {"Program":[0,2]},
    tokenPrec: 0
  });

  // @omit
  const {foldNodeProp, foldInside, indentNodeProp} = CM["@codemirror/language"];
  const {styleTags, tags: t} = CM["@codemirror/highlight"];

  let parserWithMetadata = parser.configure({
    props: [
      styleTags({
        Identifier: t.variableName,
        Boolean: t.bool,
        String: t.string,
        LineComment: t.lineComment,
        "( )": t.paren
      }),
      indentNodeProp.add({
        Application: context => context.column(context.node.from) + context.unit
      }),
      foldNodeProp.add({
        Application: foldInside
      })
    ]
  });

  //!language
  const {LezerLanguage} = CM["@codemirror/language"];
  const {javascript} = CM["@codemirror/lang-javascript"];

  const exampleLanguage = LezerLanguage.define({
    parser: parserWithMetadata,
    languageData: {
      commentTokens: {line: ";"}
    }
  });

  //!completion
  const {completeFromList} = CM["@codemirror/autocomplete"];

  const exampleCompletion = exampleLanguage.data.of({
    autocomplete: completeFromList([
      {label: "رئيسية", type: "keyword"},
      {label: "نهاية", type: "function"}
    ])
  });

  //!support
  const {LanguageSupport} = CM["@codemirror/language"];

  function example() {
    return new LanguageSupport(exampleLanguage, [exampleCompletion])
  }

  const tokens = [
    "صنف", "كائن", "دالة", "إذا", "أو", "وإلا", "و",
    "نافذة", "كلما", "نهاية", "رئيسية", "إرجاع"
  ];
  
  const variableRegex = /[_a-z\u0621-\u064A][\w\u0621-\u064A]+/i;

  const {EditorState, EditorView, basicSetup} = CM["@codemirror/basic-setup"];
  const {oneDark} = CM["@codemirror/theme-one-dark"];
  // const {simpleMode} = CM["@codemirror/legacy-modes/mode/simple-mode"];

  let state = EditorState.create({
    doc: ' ',
    extensions: [
      basicSetup, 
      oneDark,
      example()
    ]
  });

  new EditorView({
    state, 
    parent: document.querySelector("#editor")
  });

}());
*/